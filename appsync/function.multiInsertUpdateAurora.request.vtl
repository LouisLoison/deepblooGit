#set( $currentPipelineFunctionIndex = $context.stash.currentPipelineFunctionIndex )
#set( $currentPipelineFunction = $context.stash.currentPipelineFunction )
#set( $currentPipelineFunctionInfo = $ctx.stash.pipelineFunctionsInfo[$currentPipelineFunction] )

#set( $nextPipelineFunctionIndex = $currentPipelineFunctionIndex + 1 )
#set( $nextPipelineFunction = $context.stash.pipelineFunctions[$nextPipelineFunctionIndex] )
$util.qr($context.stash.put("currentPipelineFunctionIndex", $nextPipelineFunctionIndex))
$util.qr($context.stash.put("currentPipelineFunction", $nextPipelineFunction)) 

#set($data = $context.prev.result[$currentPipelineFunction]) ## analyzedTender return from Elastic function.
#set( $list = [] )
#set( $sql = "INSERT INTO " + $currentPipelineFunctionInfo['table'] + " " )

## put everything in list
#if( !$util.isList($data))
	$util.qr($list.add($data))
#else
	#set( $list = $data )
#end

## check if list is empty
#if( $list.isEmpty() )
	#return($context.prev.result )
#end

#set( $columnsObj = $list[0] )
#set( $update = " SET " )
#set( $items = "(" )

## CREATE COLUMNS
#foreach( $entry in $columnsObj.entrySet() )
  #if( $columnsObj[$entry.key])
        #set( $items = $items + $entry.key.toLowerCase())
        #set( $update = $update + $entry.key.toLowerCase() + " = " + "excluded." + $entry.key.toLowerCase())
    #if( $foreach.hasNext ) 
        #set( $items = $items + ", ")
        #set( $update = $update + ", ")
    #else
        #set( $items = $items + ") ")
    #end
  #end
#end

## CREATE VALUES
#set( $values = "VALUES" )
#foreach( $item in $list )
  #set( $values = $values + " (" )
  #foreach( $entry in $item.entrySet() )
      #if( $item[$entry.key])
            #if($util.isList($item[$entry.key]) )
               #set( $words = "" )
               #foreach( $word in $item[$entry.key] )
                  #if($util.isString($word))
                    #set( $replacedWord = $word )
                    #set( $replacedWord = $replacedWord.replaceAll("'","''") )
                    #set( $words = $words + $replacedWord)
                  #else
                      #set( $words = $words + $word)
                  #end
                
                  #if( $foreach.hasNext )
                      #set( $words = $words + ",")
                  #end
               #end
               #set( $values = $values + "'$words'")
            #elseif($util.isString($item[$entry.key]))
              #set( $text = $item[$entry.key] )
              #set( $text = $text.replaceAll("'","''") )
              #set( $values = $values + "'$text'")
            #else
              #set( $values = $values + $item[$entry.key])
            #end
        #if( $foreach.hasNext )
            #set( $values = $values + ", ")
        #else
            #set( $values = $values + ")")
        #end
      #end
  #end
  #if( $foreach.hasNext )
      #set( $values = $values + ",")
  #end
#end

#set( $sql = $sql + $items + $values + " ON CONFLICT ($currentPipelineFunctionInfo['key']) " + "DO UPDATE " + $update )

{
    "version": "2018-05-29",
    "statements": [
        $util.toJson($sql)
    ]
}
