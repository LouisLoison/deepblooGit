#set( $currentPipelineFunctionIndex = $context.stash.currentPipelineFunctionIndex )
#set( $currentPipelineFunction = $context.stash.currentPipelineFunction )
#set( $nextPipelineFunctionIndex = $currentPipelineFunctionIndex + 1 )
#set( $nextPipelineFunction = $context.stash.pipelineFunctions[$nextPipelineFunctionIndex] )
#set( $currentPipelineFunctionInfo = $ctx.stash.pipelineFunctionsInfo[$currentPipelineFunction] )
$util.qr($context.stash.put("currentPipelineFunctionIndex", $nextPipelineFunctionIndex))
$util.qr($context.stash.put("currentPipelineFunction", $nextPipelineFunction)) 

#set($data = $context.prev.result[$currentPipelineFunction]) ## analyzedTender return from Elastic function.
#set( $list = [] )
#set( $sql = "INSERT INTO " + $currentPipelineFunctionInfo['table'] + " " )


#set( $columnsObj = $data )
#set( $items = "(" )

## CREATE COLUMNS
#foreach( $entry in $data.entrySet() )
  #if( $data[$entry.key])
        #set( $items = $items + $entry.key.toLowerCase())
    #if( $foreach.hasNext ) 
        #set( $items = $items + ", ")
    #else
        #set( $items = $items + ") ")
    #end
  #end
#end

## CREATE VALUES
#set( $values = "VALUES  (" )
#set( $update = "SET " )
#foreach( $entry in $data.entrySet() )
    #if( $data[$entry.key])
        #if($util.isList($data[$entry.key]) )
            #set( $words = "" )
            #foreach( $word in $data[$entry.key] )
                #if($util.isString($word))
                #set( $replacedWord = $word )
                #set( $replacedWord = $replacedWord.replaceAll("'","''") )
                #set( $words = $words + $replacedWord)
                #else
                    #set( $words = $words + $word)
                #end
            
                #if( $foreach.hasNext )
                    #set( $words = $words + ",")
                #end
            #end
            #set( $values = $values + "'$words'")
            #set( $update = $update + $entry.key + " = " + "'$words'")
        #elseif($util.isString($data[$entry.key]))
            #set( $text = $data[$entry.key] )
            #set( $text = $text.replaceAll("'","''") )
            #set( $values = $values + "'$text'")
            #set( $update = $update + $entry.key + " = " + "'$text'")
        #else
            #set( $values = $values + $data[$entry.key])
            #set( $update = $update + $entry.key + " = " + $data[$entry.key])
        #end
    #if( $foreach.hasNext )
        #set( $values = $values + ", ")
        #set( $update = $update + ", ")
    #else
        #set( $values = $values + ")")
    #end
    #end
#end

#set( $sql = $sql + $items + $values + " ON CONFLICT ($currentPipelineFunctionInfo['key']) " + "DO UPDATE " + $update)

{
    "version": "2018-05-29",
    "statements": [
        $util.toJson($sql)
    ]
}
