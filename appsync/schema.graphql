type Tender {
    id: ID
    datasourceId: ID
    procurementId: ID
    title: String
    description: String
    lang: String
    contactFirstName: String
    contactLastName: String
    contactAddress: String
    contactCity: String
    contactState: String
    contactCountry: String
    contactEmail: String
    contactPhone: String
    buyerName: String
    buyerCountry: String
    procurementMethod: String
    noticeType: String
    country: String
    estimatedCost: String
    currency: String
    publicationDate: String
    cpvs: String
    cpvDescriptions: String
    words: String
    bidDeadlineDate: String
    sourceUrl: String
    termDate: String
    fileSource: String
    userId: ID,
    algoliaId: ID
    contractType1: String
    brand: String
    status: Int
    creationDate: String
    updateDate: String
}

type HivebriteUser{
  id: ID
  email: String
  name: String
}

type HivebriteUserConnection{
  total: Int
  users: [HivebriteUser]
}

type User{
  userId: ID
  uuid: ID
  hivebriteId: ID
  type: Int
  email: String
  username: String
  membershipFree: Int
  organizationId: Int
  country: String
  countryCode: String
  regions: String
  photo: String
  doNotContact: String
  notifSend: String
  notifCpvs: String
  notifRegions: String
  notifPostEmail: Int
  notifTripEmail: Int
  notifEventEmail: Int
  notifDigestEmail: Int
  notifCommentEmail: Int
  notifVentureEmail: Int
  notifBusinessRequest: Int
  notifCurrentLocationEmail: Int
  notifEmailingComEmail: Int
  notifForumPostEmail: Int
  notifContactByPhone: Int
  notifContactBySms: Int
  notifContactByPost: Int
  connexionTender: AWSDateTime
  connexionBusiness: AWSDateTime
  dashboardUrl: String
  businessPipeline: String
  status: Int
  creationDate: AWSDateTime
  updateDate: AWSDateTime
}

type Query {
  GetTender(userToken:String!, id: ID): Tender
  GetUser(userToken:String!): User
}
