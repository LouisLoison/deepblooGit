schema{
  query: Query
  mutation: Mutation
}

type Tender {
    id: Int
    datasourceId: ID
    procurementId: ID
    tenderUuid: ID #tenderuuid in db
    ownerId: ID #owner_id in db
    algoliaId: ID
    # userId: ID
    title: String
    description: String
    lang: String
    contactFirstName: String
    contactLastName: String
    contactAddress: String
    contactCity: String
    contactState: String
    contactCountry: String
    contactEmail: String
    contactPhone: String
    buyerName: String
    buyerCountry: String
    procurementMethod: String
    noticeType: String
    country: String
    estimatedCost: String
    currency: String
    publicationDate: String
    cpvs: String
    cpvDescriptions: String
    words: String
    bidDeadlineDate: String
    sourceUrl: String
    termDate: String
    fileSource: String
    contractType1: String
    brand: String
    status: Int
    creationDate: String
    updateDate: String
}

type HivebriteUser{
  id: ID
  email: String
  name: String
}

type HivebriteUserConnection{
  total: Int
  users: [HivebriteUser]
}

type User{
  userId: ID
  userUuid: ID
  hivebriteId: ID
  type: Int
  email: String
  username: String
  membershipFree: Int
  organizationId: Int
  country: String
  countryCode: String
  regions: String
  photo: String
  doNotContact: String
  notifSend: String
  notifCpvs: String
  notifRegions: String
  notifPostEmail: Int
  notifTripEmail: Int
  notifEventEmail: Int
  notifDigestEmail: Int
  notifCommentEmail: Int
  notifVentureEmail: Int
  notifBusinessRequest: Int
  notifCurrentLocationEmail: Int
  notifEmailingComEmail: Int
  notifForumPostEmail: Int
  notifContactByPhone: Int
  notifContactBySms: Int
  notifContactByPost: Int
  connexionTender: String
  connexionBusiness: String
  dashboardUrl: String
  businessPipeline: String
  status: Int
  creationDate: String
  updateDate: String
}

type Query {
  GetTender(userToken:String!, id: ID): Tender
  GetUser(userToken:String!): User
}

type Mutation {
  CreateTender(input:CreateTenderInput): Tender
}

input CreateTenderInput{
  ownerId: ID! #owner_id in db
  datasourceId: ID!
  procurementId: ID!
  algoliaId: ID!
  # userId: ID!
  title: String!
  description: String!
  lang: String
  contactFirstName: String
  contactLastName: String
  contactAddress: String
  contactCity: String
  contactState: String
  contactCountry: String
  contactEmail: String
  contactPhone: String
  buyerName: String
  buyerCountry: String
  procurementMethod: String
  noticeType: String
  country: String
  estimatedCost: String
  currency: String
  publicationDate: String
  cpvs: String
  cpvDescriptions: String
  words: String
  bidDeadlineDate: String
  sourceUrl: String
  termDate: String
  fileSource: String
  contractType1: String
  brand: String
  status: Int
}
